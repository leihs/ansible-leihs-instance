
- name: Create directories up to {{ deploy_to }} with owner {{ user }}
  file: path={{ deploy_to }} owner={{ user }} state=directory
  become: "{% if ansible_user_id == 'root' %}True{% else %}False{% endif %}"
  become_user: "{{ user }}"

- name: Make sure shared directory exists
  file: path={{ deploy_to }}/shared owner={{ user }} group={{ user }} state=directory

- name: Make sure attachments directory exists
  file: path={{ deploy_to }}/shared/attachments owner={{ user }} group={{ user }} state=directory

- name: Make sure shared bundle directory exists
  file: path={{ deploy_to }}/shared/bundle owner={{ user }} group={{ user }} state=directory

- name: Make sure shared log directory exists
  file: path={{ deploy_to }}/shared/log owner={{ user }} group={{ user }} state=directory

- name: Check if Ruby {{ ruby_version }} for user {{ user }} is installed
  shell: bash -l -c "rbenv versions | grep {{ ruby_version }}"
  register: ruby_installed 
  remote_user: "{{ user }}"
  ignore_errors: true

- name: Install Ruby {{ ruby_version }} for user {{ user }}
  command: bash -l -c "rbenv install {{ ruby_version }}"
  register: rbenv_ruby_path
  remote_user: "{{ user }}"
  when: ruby_installed.rc != 0

- name: Find the path to the version of Ruby we want Passenger to run
  command: bash -l -c "rbenv shell {{ ruby_version }} && rbenv which ruby"
  register: rbenv_ruby_path
  remote_user: "{{ user }}"

- name: Set a var for to the version of Ruby we want Passenger to run
  set_fact: passenger_ruby="{{ rbenv_ruby_path.stdout }}"

- name: Set a var for our document_root so we don't have to specify it by hand
  set_fact: document_root="{{ deploy_to }}/current/public"

- name: See if the deploy/public dir exists already
  stat: path={{ deploy_to }}/current/public
  register: public_dir

- name: Activate maintenance page
  file: path={{ deploy_to }}/current/public/maintenance.enable owner={{ user }} state=touch
  when: public_dir.stat.exists == True

- name: Make sure the source code at {{ deploy_to }} is at version {{ version }}
  git: repo=https://github.com/zhdk/leihs.git version={{ version }} dest={{ deploy_to }}/current force=true
  remote_user: "{{ user }}"

- name: Link to shared attachment dir for images
  file: src={{ deploy_to }}/shared/attachments dest={{ deploy_to }}/current/public/images/attachments owner=leihs state=link force=yes

- name: Link to shared attachment dir for attachments
  file: src={{ deploy_to }}/shared/attachments dest={{ deploy_to }}/current/public/attachments owner=leihs state=link force=yes

- name: Link to shared log dir
  file: src={{ deploy_to }}/shared/log dest={{ deploy_to }}/current/log owner=leihs state=link force=yes

- name: Create LDAP.yml
  template: src=LDAP.yml.j2 dest={{ deploy_to }}/current/config/LDAP.yml
  when: ldap_hostname is defined and ldap_port is defined and ldap_master_bind_dn is defined and ldap_master_bind_password is defined and ldap_base_dn is defined and ldap_unique_id_field is defined and ldap_search_field is defined

- name: Create database.yml
  template: src=database.yml.j2 dest={{ deploy_to }}/current/config/database.yml
- name: Create secret_token.rb
  template: src=secret_token.rb.j2 dest={{ deploy_to }}/current/config/secret_token.rb owner={{ user }}

- name: Install Bundler
  command: bash -l -c "rbenv shell {{ ruby_version }} && gem install bundler"
  remote_user: "{{ user }}"

- name: Install RubyGems for leihs
  command: bash -l -c 'cd {{ deploy_to }}/current
    && rbenv shell {{ ruby_version }}
    && RAILS_ENV="production" bundle install --without development test --deployment --path {{ deploy_to }}/shared/bundle'
  remote_user: "{{ user }}"

- name: Create database backup directory
  file: path={{ deploy_to }}/shared/db_backups owner={{ user }} state=directory

- name: Back up database {{ mysql_database }}
  shell: mysqldump -u{{ mysql_user }} --password={{ mysql_password }} {{ mysql_database }} > {{ deploy_to }}/shared/db_backups/leihs-{{ mysql_database}}-{{ ansible_date_time.iso8601_micro }}.sql
  become: (ansible_user_id == 'root') | ternary(true,false)
  become_user: "{{ user }}"
  become_method: su
  when: local_database == True

- name: Back up remote database {{ mysql_database }} from {{ mysql_host }}
  shell: mysqldump -h {{ mysql_host }} -u{{ mysql_user }} --password={{ mysql_password }} {{ mysql_database }} > {{ deploy_to }}/shared/db_backups/leihs-{{ mysql_database}}-{{ ansible_date_time.iso8601_micro }}.sql
  become: (ansible_user_id == 'root') | ternary(true,false)
  become_user: "{{ user }}"
  become_method: su
  when: local_database == False

- name: Migrate database
  command: bash -l -c 'cd {{ deploy_to }}/current
    && rbenv shell {{ ruby_version }}
    && RAILS_ENV="production" bundle exec rake db:migrate'
  remote_user: "{{ user }}"

- name: Precompile assets
  command: bash -l -c 'cd {{ deploy_to }}/current
    && rbenv shell {{ ruby_version }}
    && RAILS_ENV="production" bundle exec rake assets:precompile'
  remote_user: "{{ user }}"

# NOTE after upgrading to Rails 4, the assets precompilation doesn't keep the original filename without fingerprint anymore
# the timeline library has hardcoded filename which are loaded dynamically
- name: Workaround for assets
  command: bash -l -c 'cd {{ deploy_to }}/current
    && rbenv shell {{ ruby_version }}
    && cp -r vendor/assets/javascripts/simile_timeline/timeline_js public/assets/simile_timeline/'
  remote_user: "{{ user }}"

- name: Find the currently deployed revision
  command: chdir={{ deploy_to }}/current git log -n 1 --pretty=format:%H
  register: revision
  when: test_instance == True

- name: Put deploy information in the footer
  command: bash -l -c 'cd {{ deploy_to }}/current
    && rbenv shell {{ ruby_version }}
    && RAILS_ENV="production" BRANCH={{ version }} REVISION={{ revision.stdout }} bundle exec rake leihs:set_deploy_information_footer'
  when: test_instance == True
  remote_user: "{{ user }}"

- name: Disable actually sending email
  lineinfile:
    dest: "{{ deploy_to }}/current/config/environments/production.rb"
    regexp: "^.*config.action_mailer.perform_deliveries.*"
    line: "  config.action_mailer.perform_deliveries = false"
    state: present
  become: (ansible_user_id == 'root') | ternary(true,false)
  become_user: "{{ user }}"
  become_method: su
  when: test_instance == True

- name: Signal Passenger to restart instance
  file: path={{ deploy_to }}/current/tmp/restart.txt owner={{ user }} state=touch

- name: Deactivate maintenance page
  file: path={{ deploy_to }}/current/public/maintenance.enable owner={{ user }} state=absent

- name: Notify people that a new version has been deployed
  command: bash -l -c 'cd {{ deploy_to }}/current
    && rbenv shell {{ ruby_version }}
    && RAILS_ENV="production" bundle exec rails runner script/mail.rb -r {{ notification_recipients }} -s "[leihs] Deployed version {{ version }} to {{ ansible_hostname }}"'
  when: notification_recipients != False and test_instance == False and demo_instance == false
  remote_user: "{{ user }}"
